// swiftlint:disable all
// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation

enum ArkanaKeys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0xc0, 0x3a, 0x55, 0x4e, 0xd3, 0x2e, 0x85, 0x78, 0xdc, 0x6e, 0x18, 0xe3, 0x37, 0xaa, 0xe1, 0xd7, 0x51, 0x6b, 0xff, 0xd0, 0x16, 0x34, 0x42, 0x47, 0x86, 0xf2, 0x7d, 0x2c, 0xbb, 0xbd, 0xed, 0xa4, 0xe, 0xb3, 0x4a, 0xd9, 0xe9, 0xca, 0x51, 0x8c, 0x5e, 0x7f, 0x8d, 0xc7, 0xd3, 0xd8, 0xb1, 0xfc, 0x8d, 0x2a, 0x4, 0x4, 0x6a, 0x53, 0x1c, 0x9c, 0x4e, 0x46, 0xfb, 0xa6, 0x36, 0xc4, 0xcc, 0x53
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

extension ArkanaKeys {
    struct Global: ArkanaKeysGlobalProtocol {
        init() {}

        @inline(__always)
        let sENTRY_DSN: String = {
            let encoded: [UInt8] = [
                0xa8, 0x4e, 0x21, 0x3e, 0xa0, 0x14, 0xaa, 0x57, 0xb8, 0x56, 0x29, 0x80, 0x3, 0x9e, 0xd7, 0xe6, 0x66, 0x53, 0xc6, 0xe9, 0x22, 0x50, 0x23, 0x26, 0xe7, 0xc7, 0x4f, 0x4d, 0xdd, 0x8d, 0xd8, 0xc5, 0x36, 0xd1, 0x79, 0xe9, 0xde, 0xf8, 0x33, 0xb5, 0x1e, 0x10, 0xbc, 0xf6, 0xe6, 0xec, 0x80, 0xc4, 0xbb, 0x4, 0x6d, 0x6a, 0xd, 0x36, 0x6f, 0xe8, 0x60, 0x33, 0x88, 0x88, 0x45, 0xa1, 0xa2, 0x27, 0xb2, 0x43, 0x7b, 0x27, 0xbc, 0x1, 0xb1, 0x4d, 0xec, 0x5a, 0x29, 0xd5, 0x5, 0x93, 0xd6, 0xe6, 0x62, 0x5e, 0xcc, 0xe0, 0x2e, 0xc
            ]
            return ArkanaKeys.decode(encoded: encoded, cipher: ArkanaKeys.salt)
        }()
    }
}

